netsniff-ng's known issues:
///////////////////////////

Q: When I perform a traffic capture on the Ethernet interface, the PCAP file is
   created and packets are received but without 802.1Q header. If I use
   tshark, I get all headers but netsniff-ng removes 802.1Q headers. Is that
   normal behavior?

A: Yes and no. The way how VLAN headers are handled in PF_PACKET sockets by the
   kernel is somewhat problematic [1]. The problem in the Linux kernel is that
   some drivers already handle VLAN, others not. Those who handle it have
   different implementations, i.e. hardware acceleration and so on. So in some
   cases the VLAN tag is even stripped before entering the protocol stack, in
   some cases probably not. Bottom line is that the netdev hackers introduced
   a "hack" in PF_PACKET so that a VLAN ID is visible in some helper data
   structure that is accessible from the RX_RING. And then it gets really messy
   in the user space to artificially put the VLAN header back into the right
   place. Not mentioning about the resulting performance implications on that
   of /all/ libpcap tools since parts of the packet need to be copied for
   reassembly. A user reported the following, just to demonstrate this mess:
   Some tests were made with two machines, and it seems that results depends on
   the driver ...

    1) AR8131
        * ethtool -k eth0 gives "rx-vlan-offload: on"
        -> wireshark gets the vlan header
        -> netsniff-ng doesn't get the vlan header

        * ethtool -K eth0 rxvlan off
        -> wireshark gets twice the same vlan header (like QinQ even though
           I never sent QinQ)
        -> netsniff-ng gets the vlan header

    2) RTL8111/8168B
        * ethtool -k eth0 gives "rx-vlan-offload: on"
        -> wireshark gets the vlan header
        -> netsniff-ng doesn't get the vlan header

        * ethtool -K eth0 rxvlan off
        -> wireshark gets the vlan header
        -> netsniff-ng doesn't get the vlan header

    Even if we would agree on doing the same workaround as libpcap, we still
    will not be able to see QinQ, for instance, due to the fact that only /one/
    VLAN tag is stored in this kernel helper data structure. We think that
    there should be a good consensus on the kernel space side about what gets
    transferred to the userland.

    [1] http://lkml.indiana.edu/hypermail/linux/kernel/0710.3/3816.html
