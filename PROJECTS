Open projects for the netsniff-ng toolkit (if you are interested in
participation, let us know - we are looking forward):

- Better protocol support for netsniff-ng's dissector:
	- Tool: netsniff-ng
	- Required skills: C, Protocols
	- Difficulty: Easy

- Extensive testing (with eventual code fixing) and performance evaluation:
	- Tool: netsniff-ng, trafgen (both with Jumbo frames), curvetun
	- Required skills: Testing, C
	- Difficulty: Easy

- Reduce general code size, refactor, improve code (i.e. rewrite parsers):
	- Tool: all
	- Required skills: C
	- Difficulty: Easy - Hard

- Improve manpages, write a user's guide, maybe technical paper:
	- Tool: all
	- Required skills: POD, Manpages, LaTeX
	- Difficulty: Easy - Medium

- TPACKETv2 (TPACKETv3) support:
	- Tool: netsniff-ng, trafgen
	- Required skills: C
	- Difficulty: Easy - Medium

- PCAP anonymization support:
	- Tool: netsniff-ng
	- Required skills: C
	- Difficulty: Easy - Medium

- Add IPv6 support:
	- Tool: ashunt, flowtop, curvetun (testing)
	- Required skills: C
	- Difficulty: Medium

- Packet departure timing models (i.e. exponential, uniform, cauchy, normal,
  pareto distributed) and other packet scheduling behaviours (MB/s, ...),
  ideally as a plugin architecture:
	- Tool: trafgen
	- Required skills: C
	- Difficulty: Medium - Hard

- Unit test preparation:
	- Tool: all
	- Required skills: C, Shell, Sharness?, Coccinelle?, CMake?
	- Difficulty: Medium - Hard

- Improve ifpps with things like 'Gnuplot support', 'Power usage / temperature',
  'Colorized output':
	- Tool: ifpps
	- Required skills: C, Gnuplot, Procfs
	- Difficulty: Hard

- Interactive txf config generator with a set of supported protocols and
  support for packet distribution models (IMIX, Cisco, ...):
	- Tool: trafgen
	- Required skills: C, Protocols
	- Difficulty: Hard

- Warp implementation (ARP cache poisoning):
	- Tool: warp
	- Required skills: C
	- Difficulty: Hard

- PCAP-ng support:
	- Tool: netsniff-ng
	- Required skills: C
	- Difficulty: Hard

- Better obfuscation of curvetun's protocol to make it harder for DPIs
  to detect:
	- Tool: curvetun
	- Required skills: C
	- Difficulty: Very Hard

- Perform a security review of curvetun:
	- Tool: curvetun
	- Required skills: C
	- Difficulty: Very Hard

- Design and implement a high-level packet filtering language that compiles
  to bpf code:
	- Tool: either inclusion in bpfc or a new one
	- Required skills: C or Haskell
	- Difficulty: Very Hard

- Implement packet capture, replay and traffic generation for other
  hardware types (USB, Bluetooth, GSM?, ...)
	- Tool: netsniff-ng, trafgen (tools need to be extended)
	- Required skills: C
	- Difficulty: Very Hard

- Design and implement partial reconfigurable hardware for traffic
  generation under 10 Gbps, build an interface to trafgen and offload
  heavily used packets for packet generation (and transmission) in
  hardware, less heavily used in software (use Xilinx FPGAs)
	- Tool: trafgen
	- Required skills: C, VHDL
	- Difficulty: Very Hard

